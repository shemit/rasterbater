doctype html
html
  head
    title This is the title
    script#shader-fs(type="x-shader/x-fragment").

      precision mediump float;

      void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
      }
    script#shader-vs(type="x-shader/x-vertex").

      attribute vec3 aVertexPosition;

      uniform mat4 uMVMatrix;
      uniform mat4 uPMatrix;

      void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
      }

    script(src="/javascripts/glMatrix.js")
    script(type="text/javascript").
      var gl;
      var shaderProgram;

      var mvMatrix = mat4.create();
      var pMatrix = mat4.create();

      var triangleVertexPositionBuffer;
      var squareVertexPositionBuffer;

      function initGL(canvas) {
        try {
          gl = canvas.getContext("experimental-webgl");
          gl.viewportHeight = canvas.height;
          gl.viewportWidth = canvas.width;
        } catch (e) {
        }
      }

      // Get the shader by the id of the shader tag
      // Compile the shader with gl
      function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
          return null;
        }

        // Grab each shader
        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
          if (k.nodeType == 3) {
            str += k.textContent;
          }
          k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
          shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
          shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
          return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(shader));
          return null;
        }
        return shader;
      }

      function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
          alert("Could not initialize shaders");
        }

        gl.useProgram(shaderProgram);

        // Store the attribute location inside shaderProgram for
        // convenience
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(
          shaderProgram,
          "aVertexPosition"
        );

        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(
          shaderProgram,
          "uPMatrix"
        );
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(
          shaderProgram,
          "uMVMatrix"
        );
      }

      function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
      }

      function initBuffers() {
        // Initialize the buffers for the triangles. Store them on memory
        // in the graphics card to optimize loading time.
        triangleVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
        var vertices = [
           0.0,  1.0, 0.0,
          -1.0, -1.0, 0.0,
           1.0, -1.0, 0.0,
        ];
        gl.bufferData(
          gl.ARRAY_BUFFER, 
          new Float32Array(vertices),
          gl.STATIC_DRAW
        );
        triangleVertexPositionBuffer.itemSize = 3;
        triangleVertexPositionBuffer.numItems = 3;

        // Do the same thing for the square
        squareVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
        var vertices = [
           1.0,   1.0, 0.0,
          -1.0,   1.0, 0.0,
           1.0,  -1.0, 0.0,
          -1.0,  -1.0, 0.0
        ]
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array(vertices),
          gl.STATIC_DRAW
        );
        squareVertexPositionBuffer.itemSize = 3;
        squareVertexPositionBuffer.numItems = 4;

      }

      function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // create the perspective Matrix
        // mat4.perspective(
        //    viewangle, 
        //    viewratio, 
        //    near_plane, 
        //    far_plane,
        //    projectionMatrix
        // )

        mat4.perspective(
          45, 
          gl.viewportWidth/gl.viewportHeight, 
          0.1, 
          100.0,
          pMatrix
        );

        // create the matrix to identify model view in 3d space in standard
        // R3 space
        mat4.identity(mvMatrix);

        // Draw the triangle
        mat4.translate(mvMatrix, [-1.5, 0.0, -7.0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
        gl.vertexAttribPointer(
          shaderProgram.vertexPositionAttribute,
          triangleVertexPositionBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        );

        setMatrixUniforms();
        gl.drawArrays(gl.TRIANGLES, 0, triangleVertexPositionBuffer.numItems);
        
        // Draw the square
        mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
        gl.vertexAttribPointer(
          shaderProgram.vertexPositionAttribute,
          squareVertexPositionBuffer.itemSize,
          gl.FLOAT,
          false,
          0,
          0
        )
        setMatrixUniforms();
        gl.drawArrays(
          gl.TRIANGLE_STRIP, 
          0, 
          squareVertexPositionBuffer.numItems
        );
      }

      function webGLStart() {
        var canvas = document.getElementById("my-canvas");
        initGL(canvas);
        initShaders();
        initBuffers();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST); 
        
        drawScene();
      }

  body(onload="webGLStart()")
    canvas#my-canvas(width="500" height="500")
    
